name: Build sql-execution-action

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

env:
  GO_VERSION: 1.23.1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        id: setup-go
        with:
          go-version: ${{ env.GO_VERSION }}
          go-version-file: ./go.mod
      - name: Download go modules
        if: ${{ steps.setup-go.outputs.cache-hit != 'true' }}
        run: go mod download
      - name: Test
        run: go test -v ./...

  push:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Calculate the version
        run: echo "IMAGE_VERSION=$(git describe --tags --always)" >> $GITHUB_ENV
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push the image
        uses: docker/build-push-action@v5
        with:
          push: true
          file: ./Dockerfile.build
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository }}:${{ env.IMAGE_VERSION }}

  trigger-tag:
    needs: push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45.0.1
      - name: Check for file changes
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.modified_files }}"
          if echo "${{ steps.changed-files.outputs.modified_files }}" | grep -q 'Dockerfile'; then
              echo "file_changed=true" >> $GITHUB_ENV
          else
              echo "file_changed=false" >> $GITHUB_ENV
          fi
      - name: Create and push tag
        if: env.file_changed == 'true'
        run: |
          NEW_TAG=$(cat Dockerfile | sed 's/FROM ghcr.io\/nandemo-ya\/sql-execution-action://g')
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG